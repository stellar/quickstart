on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
    inputs:
      sha:
        description: 'Sha to build'
        type: 'string'
        required: true
      arch:
        description: 'Architecture to build the image for (amd64, arm64)'
        type: 'string'
        required: true
      tag:
        description: 'Tag to use on the image name'
        type: 'string'
        required: true
      protocol_version_default:
        description: 'Default protocol version to use on local networks'
        type: 'number'
        required: true
      core_repo:
        description: 'Git repo for stellar-core'
        type: 'string'
        default: 'stellar/stellar-core'
      core_ref:
        description: 'Git ref for the stellar-core repo'
        type: 'string'
        required: true
      core_configure_flags:
        description: 'CONFIGURE_FLAGS used when building stellar-core'
        type: 'string'
        default: '--disable-tests'
      horizon_ref:
        description: 'Git ref for the stellar/go repo (horizon)'
        type: 'string'
        required: true
      xdr_ref:
        description: 'Git ref for the stellar/rs-stellar-xdr repo'
        type: 'string'
        required: false
      stellar_rpc_ref:
        description: 'Git ref for the stellar/stellar-rpc repo (stellar-rpc)'
        type: 'string'
        required: true
      friendbot_ref:
        description: 'Git ref for the stellar/go repo (friendbot)'
        type: 'string'
        required: true
      lab_ref:
        description: 'Git ref for the stellar/laboratory (lab)'
        type: 'string'
        required: true
      test_matrix:
        description: 'JSON matrix for the test job'
        type: 'string'
        required: true
    outputs:
      image:
        description: 'Image pushed as a result of this build'
        value: ${{ jobs.build.outputs.image }}

env:
  IMAGE: ${{ format('{0}/{1}:{2}', secrets.DOCKERHUB_TOKEN && 'docker.io' || 'ghcr.io', github.repository, inputs.tag) }}
  # Cache ID is a value inserted into cache keys. Whenever changing the build
  # in a way that needs to use entirely new fresh builds, increment the number
  # by one so that all the keys become new.
  CACHE_ID: 3
  ARTIFACT_RETENTION_DAYS_FOR_IMAGE: 7
  ARTIFACT_RETENTION_DAYS_FOR_LOGS: 60

jobs:

  shas:
    runs-on: ubuntu-latest
    outputs:
      xdr: ${{ steps.xdr.outputs.sha }}
      core: ${{ steps.core.outputs.sha }}
      rpc: ${{ steps.rpc.outputs.sha }}
      horizon: ${{ steps.horizon.outputs.sha }}
      friendbot: ${{ steps.friendbot.outputs.sha }}
      lab: ${{ steps.lab.outputs.sha }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - id: xdr
      run: echo "sha=$(gh api repos/stellar/rs-stellar-xdr/commits/"${{inputs.xdr_ref}}" --jq '.sha')" | tee -a $GITHUB_OUTPUT
    - id: core
      run: echo "sha=$(gh api repos/"${{inputs.core_repo}}"/commits/"${{inputs.core_ref}}" --jq '.sha')" | tee -a $GITHUB_OUTPUT
    - id: rpc
      run: echo "sha=$(gh api repos/stellar/stellar-rpc/commits/"${{inputs.stellar_rpc_ref}}" --jq '.sha')" | tee -a $GITHUB_OUTPUT
    - id: horizon
      run: echo "sha=$(gh api repos/stellar/go/commits/"${{inputs.horizon_ref}}" --jq '.sha')" | tee -a $GITHUB_OUTPUT
    - id: friendbot
      run: echo "sha=$(gh api repos/stellar/go/commits/"${{inputs.friendbot_ref}}" --jq '.sha')" | tee -a $GITHUB_OUTPUT
    - id: lab
      run: echo "sha=$(gh api repos/stellar/laboratory/commits/"${{inputs.lab_ref}}" --jq '.sha')" | tee -a $GITHUB_OUTPUT

  load-stellar-core-from-cache:
    needs: [shas]
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-core-${{ inputs.arch }}-${{ needs.shas.outputs.core }}-${{ inputs.core_configure_flags }}
    - name: Upload Stellar-Core Image
      if: steps.cache.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-core-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build-stellar-core:
    needs: [shas, load-stellar-core-from-cache]
    if: ${{ needs.load-stellar-core-from-cache.outputs.cache-hit != 'true' }}
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-jammy-4-cores-arm64' || 'ubuntu-latest' }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-core-${{ inputs.arch }}-${{ needs.shas.outputs.core }}-${{ inputs.core_configure_flags }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Core Image
      run: >
        docker buildx build --platform linux/${{ inputs.arch }}
        -f docker/Dockerfile.testing -t stellar-core:${{ inputs.arch }}
        -o type=docker,dest=/tmp/image
        https://github.com/${{ inputs.core_repo }}.git#${{ needs.shas.outputs.core }}
        --build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=true
        --build-arg CONFIGURE_FLAGS='${{ inputs.core_configure_flags }}'
    - name: Upload Stellar-Core Image
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-core-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  load-stellar-horizon-from-cache:
    needs: [shas]
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-horizon-${{ inputs.arch }}-${{ needs.shas.outputs.horizon }}
    - name: Upload Stellar-Horizon Image
      if: steps.cache.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-horizon-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build-stellar-horizon:
    needs: [shas, load-stellar-horizon-from-cache]
    if: ${{ needs.load-stellar-horizon-from-cache.outputs.cache-hit != 'true' }}
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-jammy-4-cores-arm64' || 'ubuntu-latest' }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-horizon-${{ inputs.arch }}-${{ needs.shas.outputs.horizon }}
    - name: Checkout Quickstart for Horizon docker file
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Setup buildx
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Horizon Image
      run: >
        docker buildx build --platform linux/${{ inputs.arch }}
        -f Dockerfile.horizon
        -t stellar-horizon:${{ inputs.arch }} -o type=docker,dest=/tmp/image
        --build-arg REF="${{ needs.shas.outputs.horizon }}" .
    - name: Upload Stellar-Horizon Image
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-horizon-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  load-stellar-friendbot-from-cache:
    needs: [shas]
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-friendbot-${{ inputs.arch }}-${{ needs.shas.outputs.friendbot }}
    - name: Upload Stellar-Friendbot Image
      if: steps.cache.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-friendbot-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build-stellar-friendbot:
    needs: [shas, load-stellar-friendbot-from-cache]
    if: ${{ needs.load-stellar-friendbot-from-cache.outputs.cache-hit != 'true' }}
    runs-on: ubuntu-latest
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-friendbot-${{ inputs.arch }}-${{ needs.shas.outputs.friendbot }}
    - name: Checkout Quickstart for Friendbot docker file
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Setup buildx
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Friendbot Image
      run: >
        docker buildx build --platform linux/${{ inputs.arch }}
        -f Dockerfile.friendbot
        -t stellar-friendbot:${{ inputs.arch }}
        -o type=docker,dest=/tmp/image
        --build-arg REF="${{ needs.shas.outputs.friendbot }}" .
    - name: Upload Stellar-Friendbot Image
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-friendbot-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  load-stellar-rpc-from-cache:
    needs: [shas]
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-rpc-${{ inputs.arch }}-${{ needs.shas.outputs.rpc }}
    - name: Upload Stellar-Core Image
      if: steps.cache.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-rpc-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build-stellar-rpc:
    needs: [shas, load-stellar-rpc-from-cache]
    if: ${{ needs.load-stellar-rpc-from-cache.outputs.cache-hit != 'true' }}
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-jammy-4-cores-arm64' || 'ubuntu-latest' }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-rpc-${{ inputs.arch }}-${{ needs.shas.outputs.rpc }}
    - name: Checkout Quickstart for RPC docker file
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-rpc Image
      run: >
        docker buildx build --platform linux/${{ inputs.arch }}
        -f Dockerfile.rpc
        -t stellar-rpc:${{ inputs.arch }}
        -o type=docker,dest=/tmp/image
        --build-arg REF="${{ needs.shas.outputs.rpc }}" .
    - name: Upload Stellar-rpc Image
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-rpc-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  load-stellar-lab-from-cache:
    needs: [shas]
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-lab-${{ inputs.arch }}-${{ needs.shas.outputs.lab }}
    - name: Upload Stellar-Lab Image
      if: steps.cache.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-lab-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build-stellar-lab:
    needs: [shas, load-stellar-lab-from-cache]
    if: ${{ needs.load-stellar-lab-from-cache.outputs.cache-hit != 'true' }}
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-jammy-4-cores-arm64' || 'ubuntu-latest' }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-stellar-lab-${{ inputs.arch }}-${{ needs.shas.outputs.lab }}
    - name: Checkout Quickstart for Horizon docker file
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Setup buildx
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-lab Image
      run: >
        docker buildx build --platform linux/${{ inputs.arch }}
        -f Dockerfile.lab
        -t stellar-lab:${{ inputs.arch }} -o type=docker,dest=/tmp/image
        --build-arg NEXT_PUBLIC_COMMIT_HASH=${{ needs.shas.outputs.lab }} .
    - name: Upload Stellar-lab Image
      uses: actions/upload-artifact@v4
      with:
        name: image-stellar-lab-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  load-rs-stellar-xdr-from-cache:
    needs: [shas]
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-rs-stellar-xdr-${{ inputs.arch }}-${{ needs.shas.outputs.xdr }}
    - name: Upload Stellar-Core Image
      if: steps.cache.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: image-rs-stellar-xdr-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build-rs-stellar-xdr:
    needs: [shas, load-rs-stellar-xdr-from-cache]
    if: ${{ needs.load-rs-stellar-xdr-from-cache.outputs.cache-hit != 'true' }}
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-jammy-4-cores-arm64' || 'ubuntu-latest' }}
    steps:
    - name: Checkout Quickstart for Horizon docker file
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-${{ env.CACHE_ID }}-rs-stellar-xdr-${{ inputs.arch }}-${{ needs.shas.outputs.xdr }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Rs-Xdr Image
      run: >
        docker buildx build --platform linux/${{ inputs.arch }}
        -f Dockerfile.xdr
        -t stellar-rs-xdr:${{ inputs.arch }}
        -o type=docker,dest=/tmp/image
        --build-arg REPO=https://github.com/stellar/rs-stellar-xdr.git
        --build-arg REF="${{ needs.shas.outputs.xdr }}" .
    - name: Upload Stellar-Rs-Xdr Image
      uses: actions/upload-artifact@v4
      with:
        name: image-rs-stellar-xdr-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  build:
    needs: [build-stellar-core, build-stellar-horizon, build-rs-stellar-xdr, build-stellar-friendbot, build-stellar-rpc, build-stellar-lab]
    if: always() && !failure() && !cancelled()
    outputs:
      image: ${{ steps.image.outputs.name }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.sha }}
    - name: Download Stellar XDR
      uses: actions/download-artifact@v4
      with:
        name: image-rs-stellar-xdr-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/stellar-xdr
    - name: Download Stellar-Core Image
      uses: actions/download-artifact@v4
      with:
        name: image-stellar-core-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/stellar-core
    - name: Download Stellar-Horizon Image
      uses: actions/download-artifact@v4
      with:
        name: image-stellar-horizon-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/stellar-horizon
    - name: Download Stellar-Friendbot Image
      uses: actions/download-artifact@v4
      with:
        name: image-stellar-friendbot-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/stellar-friendbot
    - name: Download Stellar-Lab Image
      uses: actions/download-artifact@v4
      with:
        name: image-stellar-lab-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/stellar-lab
    - name: Download Stellar-rpc Image
      uses: actions/download-artifact@v4
      with:
        name: image-stellar-rpc-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/stellar-rpc
    - name: Load Stellar-Core Image
      run: docker load -i /tmp/stellar-core/image
    - name: Load Stellar-Horizon Image
      run: docker load -i /tmp/stellar-horizon/image
    - name: Load Stellar-Friendbot Image
      run: docker load -i /tmp/stellar-friendbot/image
    - name: Load Stellar-Lab Image
      run: docker load -i /tmp/stellar-lab/image
    - name: Load Stellar-rpc Image
      run: docker load -i /tmp/stellar-rpc/image
    - name: Load Stellar-Rs-Xdr Image
      run: docker load -i /tmp/stellar-xdr/image
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - id: image
      name: Image Name
      run: echo "name=$IMAGE" >> $GITHUB_OUTPUT
    - name: Pull Base Image
      run: docker pull --platform linux/${{ inputs.arch }} ubuntu:22.04
    # Docker buildx cannot be used to build the dev quickstart image because
    # buildx does not yet support importing existing images, like the core and
    # horizon images above, into a buildx builder's cache. Buildx would be
    # preferred because it can output a smaller image file faster than docker
    # save can.  Once buildx supports it we can update.
    # https://github.com/docker/buildx/issues/847
    - name: Build Quickstart Image
      run: >
        docker build
        --platform linux/${{ inputs.arch }}
        -f Dockerfile
        -t $IMAGE
        --label org.opencontainers.image.revision="${{ inputs.sha }}"
        .
        --build-arg REVISION="${{ inputs.sha }}"
        --build-arg PROTOCOL_VERSION_DEFAULT="${{ inputs.protocol_version_default }}"
        --build-arg STELLAR_XDR_IMAGE_REF=stellar-rs-xdr:${{ inputs.arch }}
        --build-arg STELLAR_CORE_IMAGE_REF=stellar-core:${{ inputs.arch }}
        --build-arg HORIZON_IMAGE_REF=stellar-horizon:${{ inputs.arch }}
        --build-arg FRIENDBOT_IMAGE_REF=stellar-friendbot:${{ inputs.arch }}
        --build-arg STELLAR_RPC_IMAGE_REF=stellar-rpc:${{ inputs.arch }}
        --build-arg LAB_IMAGE_REF=stellar-lab:${{ inputs.arch }}
    - name: Save Quickstart Image
      run: docker save $IMAGE -o /tmp/image
    - name: Upload Quickstart Image
      uses: actions/upload-artifact@v4
      with:
        name: image-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/image
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_IMAGE }}

  test:
    needs: build
    if: always() && !failure() && !cancelled()
    strategy:
      matrix: ${{ fromJSON(inputs.test_matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.sha }}
    - name: Download Quickstart Image
      uses: actions/download-artifact@v4
      with:
        name: image-${{ inputs.tag }}-${{ inputs.arch }}
        path: /tmp/
    - name: Load Quickstart Image
      run: docker load -i /tmp/image
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Prepare Logs Directory
      run: mkdir -p logs
    - name: Run Quickstart Image
      run: >
        docker run
        --platform linux/${{ inputs.arch }}
        -d
        -p
        "8000:8000"
        -p "11626:11626"
        --name stellar
        $IMAGE
        --${{ matrix.network }}
        --enable ${{ matrix.core }},${{ matrix.horizon }},${{ matrix.rpc }}
        ${{ matrix.options }}
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1
    - name: Sleep until supervisor is up
      run: sleep 10
    - name: Run core test
      if: ${{ matrix.core }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f stellar-core" | docker exec -i stellar sh &
        go run tests/test_core.go
        curl http://localhost:11626/info
    - name: Run horizon up test
      if: ${{ matrix.horizon }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run tests/test_horizon_up.go
        curl http://localhost:8000
    - name: Run horizon core up test
      if: ${{ matrix.horizon && matrix.network != 'pubnet' }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run tests/test_horizon_core_up.go
        curl http://localhost:8000
    - name: Run horizon ingesting test
      if: ${{ matrix.horizon && matrix.network != 'pubnet' }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f stellar-core" | docker exec -i stellar sh &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run tests/test_horizon_ingesting.go
        curl http://localhost:8000
    - name: Run friendbot test
      if: ${{ matrix.horizon && matrix.network == 'local' }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f friendbot" | docker exec -i stellar sh &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run tests/test_friendbot.go
    - name: Run stellar rpc up test
      if: ${{ matrix.rpc }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f stellar-rpc" | docker exec -i stellar sh &
        go run tests/test_stellar_rpc_up.go
    - name: Run stellar rpc healthy test
      if: ${{ matrix.rpc && matrix.network != 'pubnet' }}
      run: |
        docker logs stellar -f &
        echo "supervisorctl tail -f stellar-rpc" | docker exec -i stellar sh &
        go run tests/test_stellar_rpc_healthy.go
    - name: Prepare Test Logs
      if: always()
      run: docker cp stellar:/var/log logs
    - name: Upload Test Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ inputs.tag }}-${{ inputs.arch }}-test-${{ strategy.job-index }}
        path: logs
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS_FOR_LOGS }}

  push-pr:
    # Push image to registry after build for pull requests from a local branch.
    if: always() && !failure() && !cancelled() && github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    needs: build
    permissions:
      packages: write
      statuses: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.sha  }}
    - id: push
      uses: ./.github/actions/push
      with:
        head_sha: ${{ inputs.sha }}
        artifact_name: image-${{ inputs.tag }}-${{ inputs.arch }}
        artifact_image_file: image
        arch: ${{ inputs.arch }}
        image: ${{ env.IMAGE }}
        registry: ${{ secrets.DOCKERHUB_TOKEN && 'docker.io' || 'ghcr.io' }}
        username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN || github.token }}

  push-release:
    # Push image to registry after test for main.
    if: always() && !failure() && !cancelled() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, test]
    permissions:
      packages: write
      statuses: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ inputs.sha  }}
    - id: push
      uses: ./.github/actions/push
      with:
        head_sha: ${{ inputs.sha }}
        artifact_name: image-${{ inputs.tag }}-${{ inputs.arch }}
        artifact_image_file: image
        arch: ${{ inputs.arch }}
        image: ${{ env.IMAGE }}
        registry: ${{ secrets.DOCKERHUB_TOKEN && 'docker.io' || 'ghcr.io' }}
        username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN || github.token }}

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
    inputs:
      arch:
        description: 'Architecture to build the image for (amd64, arm64)'
        type: 'string'
        required: true
      tag:
        description: 'Tag to use on the image name'
        type: 'string'
        required: true
      core_ref:
        description: 'Git ref for the stellar/stellar-core repo (stellar-core)'
        type: 'string'
        required: true
      core_configure_flags:
        description: 'CONFIGURE_FLAGS used when building stellar-core'
        type: 'string'
        default: '--disable-tests'
      core_build_runner_type:
        description: 'The GitHub Runner instance type to build stellar-core on'
        type: 'string'
        default: 'ubuntu-latest'
      go_ref:
        description: 'Git ref for the stellar/go repo (stellar-horizon, stellar-friendbot)'
        type: 'string'
        required: true
      soroban_tools_ref:
        description: 'Git ref for the stellar/soroban-tools repo (soroban-rpc)'
        type: 'string'
        required: true
      test_matrix:
        description: 'JSON matrix for the test job'
        type: 'string'
        required: true
    outputs:
      image:
        description: 'Image pushed as a result of this build'
        value: ${{ jobs.build.outputs.image }}

env:
  HEAD_SHA: ${{ github.event.pull_request.head.sha || github.sha }}
  IMAGE: ${{ format('{0}/{1}:{2}', secrets.DOCKERHUB_TOKEN && 'docker.io' || 'ghcr.io', github.repository, github.event_name == 'pull_request' && format('pr-{0}-{1}', github.event.pull_request.number, inputs.tag) || inputs.tag) }}
  GO_REPO_BRANCH: ${{ inputs.go_ref }}
  SOROBAN_TOOLS_REPO_BRANCH: ${{ inputs.soroban_tools_ref }}
  CORE_REPO_BRANCH: ${{ inputs.core_ref }}

jobs:

  build-stellar-core:
    runs-on: ${{ inputs.core_build_runner_type }}
    steps:
    - id: cache
      uses: actions/cache@v3
      with:
        path: /tmp/image
        key: image-stellar-core-${{ inputs.arch }}-${{ env.CORE_REPO_BRANCH }}-${{ inputs.core_configure_flags }}
    - if: steps.cache.outputs.cache-hit != 'true' && inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - if: steps.cache.outputs.cache-hit != 'true'
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - if: steps.cache.outputs.cache-hit != 'true'
      name: Build Stellar-Core Image
      run: docker buildx build --platform linux/${{ inputs.arch }} -f docker/Dockerfile.testing -t stellar-core:${{ inputs.arch }} -o type=docker,dest=/tmp/image https://github.com/stellar/stellar-core.git#${{ env.CORE_REPO_BRANCH }} --build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=true --build-arg CONFIGURE_FLAGS='${{ inputs.core_configure_flags }}'
    - name: Upload Stellar-Core Image
      uses: actions/upload-artifact@v2
      with:
        name: image-stellar-core-${{ inputs.arch }}
        path: /tmp/image

# don't use caches on horizon builds as the git ref for it can be a branch name that refers to 
# different commits over time, cache key won't invalidate correctly. 
  build-stellar-horizon:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Quickstart for Horizon docker file
      uses: actions/checkout@v3
      with:
        ref: ${{ env.HEAD_SHA }}
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Setup buildx
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Horizon Image
      run: docker buildx build --platform linux/${{ inputs.arch }} -f Dockerfile.horizon --target builder -t stellar-horizon:${{ inputs.arch }} -o type=docker,dest=/tmp/image . --build-arg REF="${{ env.GO_REPO_BRANCH }}"
    - name: Upload Stellar-Horizon Image
      uses: actions/upload-artifact@v2
      with:
        name: image-stellar-horizon-${{ inputs.arch }}
        path: /tmp/image

# don't use caches on friendbot builds as the git ref for it can be a branch name that refers to 
# different commits over time, cache key won't invalidate correctly. 
  build-stellar-friendbot:
    runs-on: ubuntu-latest
    steps:
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Setup buildx
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Friendbot Image
      run: docker buildx build --platform linux/${{ inputs.arch }} -f services/friendbot/docker/Dockerfile -t stellar-friendbot:${{ inputs.arch }} -o type=docker,dest=/tmp/image https://github.com/stellar/go.git#${{ env.GO_REPO_BRANCH }}
    - name: Upload Stellar-Friendbot Image
      uses: actions/upload-artifact@v2
      with:
        name: image-stellar-friendbot-${{ inputs.arch }}
        path: /tmp/image

  build-stellar-soroban-rpc:
    runs-on: ${{ inputs.core_build_runner_type }}
    steps:
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Uses buildx
      uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Stellar-Soroban-Rpc Image
      run: docker buildx build --platform linux/${{ inputs.arch }} -f cmd/soroban-rpc/docker/Dockerfile --target build -t stellar-soroban-rpc:${{ inputs.arch }} -o type=docker,dest=/tmp/image https://github.com/stellar/soroban-tools.git#${{ env.SOROBAN_TOOLS_REPO_BRANCH }}
    - name: Upload Stellar-Friendbot Image
      uses: actions/upload-artifact@v2
      with:
        name: image-stellar-soroban-rpc-${{ inputs.arch }}
        path: /tmp/image

  build:
    needs: [build-stellar-core, build-stellar-horizon, build-stellar-friendbot, build-stellar-soroban-rpc]
    outputs:
      image: ${{ steps.image.outputs.name }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ env.HEAD_SHA }}
    - name: Download Stellar-Core Image
      uses: actions/download-artifact@v2
      with:
        name: image-stellar-core-${{ inputs.arch }}
        path: /tmp/stellar-core
    - name: Download Stellar-Horizon Image
      uses: actions/download-artifact@v2
      with:
        name: image-stellar-horizon-${{ inputs.arch }}
        path: /tmp/stellar-horizon
    - name: Download Stellar-Friendbot Image
      uses: actions/download-artifact@v2
      with:
        name: image-stellar-friendbot-${{ inputs.arch }}
        path: /tmp/stellar-friendbot
    - name: Download Stellar-Soroban-Rpc Image
      uses: actions/download-artifact@v2
      with:
        name: image-stellar-soroban-rpc-${{ inputs.arch }}
        path: /tmp/stellar-soroban-rpc
    - name: Load Stellar-Core Image
      run: docker load -i /tmp/stellar-core/image
    - name: Load Stellar-Horizon Image
      run: docker load -i /tmp/stellar-horizon/image
    - name: Load Stellar-Friendbot Image
      run: docker load -i /tmp/stellar-friendbot/image
    - name: Load Stellar-Soroban-Rpc Image
      run: docker load -i /tmp/stellar-soroban-rpc/image
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - id: image
      name: Image Name
      run: echo "name=$IMAGE" >> $GITHUB_OUTPUT
    - name: Pull Base Image
      run: docker pull --platform linux/${{ inputs.arch }} ubuntu:22.04
    # Docker buildx cannot be used to build the dev quickstart image because
    # buildx does not yet support importing existing images, like the core and
    # horizon images above, into a buildx builder's cache. Buildx would be
    # preferred because it can output a smaller image file faster than docker
    # save can.  Once buildx supports it we can update.
    # https://github.com/docker/buildx/issues/847
    - name: Build Quickstart Image
      run: docker build --platform linux/${{ inputs.arch }} -f Dockerfile -t $IMAGE --label org.opencontainers.image.revision="${{ env.HEAD_SHA }}" . --build-arg STELLAR_CORE_IMAGE_REF=stellar-core:${{ inputs.arch }} --build-arg HORIZON_IMAGE_REF=stellar-horizon:${{ inputs.arch }} --build-arg FRIENDBOT_IMAGE_REF=stellar-friendbot:${{ inputs.arch }} --build-arg SOROBAN_RPC_IMAGE_REF=stellar-soroban-rpc:${{ inputs.arch }}
    - name: Save Quickstart Image
      run: docker save $IMAGE -o /tmp/image
    - name: Upload Quickstart Image
      uses: actions/upload-artifact@v2
      with:
        name: image-${{ inputs.arch }}
        path: /tmp/image

  test:
    needs: build
    strategy:
      matrix: ${{ fromJSON(inputs.test_matrix) }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA }}
    - name: Download Quickstart Image
      uses: actions/download-artifact@v2
      with:
        name: image-${{ inputs.arch }}
        path: /tmp/
    - name: Load Quickstart Image
      run: docker load -i /tmp/image
    - if: inputs.arch == 'arm64'
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18
      with:
        platforms: arm64
    - name: Run Quickstart Image
      run: docker run --platform linux/${{ inputs.arch }} --rm -d -p "8000:8000" -p "11626:11626" --name stellar $IMAGE --${{ matrix.network }} ${{ matrix.options }}
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1
    - name: Sleep until supervisor is up
      run: sleep 10
    - name: Run core test
      run: |
        echo "supervisorctl tail -f stellar-core" | docker exec -i stellar sh &
        go run test_core.go
        curl http://localhost:11626/info
    - name: Run horizon up test
      run: |
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run test_horizon_up.go
        curl http://localhost:8000
    - name: Run horizon ingesting test
      if: ${{ matrix.network != 'pubnet' }}
      run: |
        echo "supervisorctl tail -f stellar-core" | docker exec -i stellar sh &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run test_horizon_ingesting.go
        curl http://localhost:8000
    - name: Run friendbot test
      if: ${{ matrix.network == 'standalone' }}
      run: |
        echo "supervisorctl tail -f friendbot" | docker exec -i stellar sh &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run test_friendbot.go
    - name: Run soroban rpc test
      if: ${{ contains(matrix.options, '--enable-soroban-rpc') }}
      run: |
        echo "supervisorctl tail -f soroban-rpc" | docker exec -i stellar sh &
        go run test_soroban_rpc_up.go

  push-pr:
    # Push image to registry after build for pull requests from a local branch.
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
    needs: build
    permissions:
      packages: write
      statuses: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA  }}
    - id: push
      uses: ./.github/actions/push
      with:
        head_sha: ${{ env.HEAD_SHA }}
        artifact_name: image-${{ inputs.arch }}
        artifact_image_file: image
        arch: ${{ inputs.arch }}
        image: ${{ env.IMAGE }}
        registry: ${{ secrets.DOCKERHUB_TOKEN && 'docker.io' || 'ghcr.io' }}
        username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN || github.token }}

  push-release:
    # Push image to registry after test for master.
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: [build, test]
    permissions:
      packages: write
      statuses: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA  }}
    - id: push
      uses: ./.github/actions/push
      with:
        head_sha: ${{ env.HEAD_SHA }}
        artifact_name: image-${{ inputs.arch }}
        artifact_image_file: image
        arch: ${{ inputs.arch }}
        image: ${{ env.IMAGE }}
        registry: ${{ secrets.DOCKERHUB_TOKEN && 'docker.io' || 'ghcr.io' }}
        username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN || github.token }}

name: Dockerfile

on:
  push:
    branches:
    - master
  pull_request:

# Prevent more than one build of this workflow for a branch to be running at the
# same time, and if multiple are queued, only run the latest, cancelling any
# already running build. The exception being any protected branch, such as
# master, where a build for every commit will run.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_protected == 'true' && github.sha || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ${{ secrets.DOCKERHUB_USERNAME && 'docker.io' || 'ghcr.io' }}
  HEAD_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA }}
    - uses: docker/setup-buildx-action@5146db6c4d81fbfd508899f851bbb3883a96ff9f
    - name: Build Quickstart Image
      run: docker buildx build -f Dockerfile -t stellar/quickstart --label org.opencontainers.image.revision="${{ env.HEAD_SHA }}" -o type=docker,dest=/tmp/image .
    - name: Upload Quickstart Image
      uses: actions/upload-artifact@v2
      with:
        name: image-Dockerfile
        path: /tmp/image

  test:
    needs: build
    strategy:
      matrix:
        network: [testnet, pubnet, standalone]
        options: ["", --enable-horizon-captive-core]
        exclude:
          - network: testnet
            options: --enable-horizon-captive-core
          - network: pubnet
            options: --enable-horizon-captive-core
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA  }}
    - name: Download Quickstart Image
      uses: actions/download-artifact@v2
      with:
        name: image-Dockerfile
        path: /tmp/
    - name: Load Quickstart Image
      run: docker load -i /tmp/image
    - name: Run Quickstart Image
      run: docker run --rm -d -p "8000:8000" --name stellar stellar/quickstart --${{ matrix.network }} ${{ matrix.options }}
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1
    - name: Sleep until supervisor is up
      run: sleep 10
    - name: Run test
      run: |
        echo "supervisorctl tail -f stellar-core" | docker exec -i stellar sh &
        echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &
        go run test.go
        curl http://localhost:8000

  push:
    # Push an image if this is a pull request from a local branch.
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
    needs: build
    permissions:
      packages: write
      statuses: write
    environment:
      name: ${{ github.repository }}:pr-${{ github.event.pull_request.number }}
      url: ${{ steps.push.outputs.url }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA  }}
    - id: push
      uses: ./.github/actions/push
      with:
        head_sha: ${{ env.HEAD_SHA }}
        artifact_name: image-Dockerfile
        artifact_image_file: image
        artifact_image_name: stellar/quickstart
        registry: ${{ env.REGISTRY }}
        tag: pr-${{ github.event.pull_request.number }}
        username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN || github.token }}

  tag:
    # Tag if this is a push to master.
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: [push, test]
    permissions:
      packages: write
      statuses: write
    environment:
      name: ${{ github.repository }}:latest
      url: ${{ steps.push.outputs.url }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ env.HEAD_SHA  }}
    - id: push
      uses: ./.github/actions/push
      with:
        head_sha: ${{ env.HEAD_SHA }}
        artifact_name: image-Dockerfile
        artifact_image_file: image
        artifact_image_name: stellar/quickstart
        registry: ${{ env.REGISTRY }}
        tag: latest
        username: ${{ secrets.DOCKERHUB_USERNAME || github.actor }}
        password: ${{ secrets.DOCKERHUB_TOKEN || github.token }}
